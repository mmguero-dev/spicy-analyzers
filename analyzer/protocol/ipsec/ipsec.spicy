# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.

# Good references for these packets can be found at:
# https://github.com/ukncsc/zeek-plugin-ikev2/blob/master/src/IKEv2-protocol.pac
# https://tools.ietf.org/html/rfc4306
# https://tools.ietf.org/html/rfc7296
# https://tools.ietf.org/html/rfc2408
# https://tools.ietf.org/html/rfc2409

module ipsec;

import spicy;

type ExchangeType = enum {
	IKEv1_BASE = 1,
	IKEv1_ID_PROTECT = 2,
	IKEv1_AUTH_ONLY = 3,
	IKEv1_AGGRESSIVE = 4,
	IKEv1_INFORMATIONAL = 5,
	IKE_SA_INIT	= 34,
	IKE_AUTH = 35,
	CREATE_CHILD_SA	= 36,
	INFORMATIONAL = 37
};

type PayloadType = enum {
	NO_NEXT_PAYLOAD = 0,
	SA_v1 = 1,
	P_v1 = 2,
	T_v1 = 3,
	KE_v1 = 4,
	ID_v1 = 5,
	CERT_v1 = 6,
	CR_v1 = 7,
	HASH_v1 = 8,
	SIG_v1 = 9,
	NONCE_v1 = 10,
	N_v1 = 11,
	D_v1 = 12,
	VID_v1 = 13,
	SA = 33,
	KE = 34,
	IDi = 35,
	IDr = 36,
	CERT = 37,
	CERTREQ = 38,
	AUTH = 39,
	Ni = 40,
	N = 41,
	D = 42,
	V = 43,
	TSi = 44,
	TSr = 45,
	E = 46,
	CP = 47,
	EAP = 48
};

type ProtocolID = enum {
	RESERVED = 0,
	IKE = 1,
	AH = 2,
	ESP = 3,
};

type TransformType = enum {
	RESERVED = 0,
	ENCR = 1,
	PRF = 2,
	INTEG = 3,
	DH = 4,
	ESN = 5,
};

type TransformID_ENCR = enum {
	RESERVED = 0,
	ENCR_DES_IV64 = 1,
	ENCR_DES = 2,
	ENCR_3DES = 3,
	ENCR_RC5 = 4,
	ENCR_IDEA = 5,
	ENCR_CAST = 6,
	ENCR_BLOWFISH = 7,
	ENCR_3IDEA = 8,
	ENCR_DES_IV32 = 9,
	RESERVED2 = 10,
	ENCR_NULL = 11,
	ENCR_AES_CBC = 12,
	ENCR_AES_CTR = 13,
};

type TransformID_PRF = enum {
	RESERVED = 0,
	PRF_HMAC_HMD5 = 1,
	PRF_HMAC_SHA1 = 2,
	PRF_HMAC_TIGER = 3,
	PRF_AES128_XCBC = 4,
};

type TransformID_INTEG = enum {
	NONE = 0,
	AUTH_HMAC_MD5_96 = 1,
	AUTH_HMAC_SHA1_96 = 2,
	AUTH_DES_MAC = 3,
	AUTH_KPDK_MD5 = 4,
	AUTH_AES_XCBC_96 = 5,
};

type IDType = enum {
	RESERVED = 0,
	ID_IPV4_ADDR = 1,
	ID_FQDN = 2,
	ID_RFC822_ADDR = 3,
	ID_IPV6_ADDR = 5,
	ID_DER_ASN1_DN = 9,
	ID_DER_ASN1_GN = 10,
	ID_KEY_ID = 11,
};

type CertEncoding = enum {
	RESERVED = 0,
	PKCS = 1,
	PGP = 2,
	DNS_SIGNED = 3,
	X509_SIG = 4,
	KERBEROS = 6,
	CRL = 7,
	ARL = 8,
	SPKI = 9,
	X509_ATTRIBUTE = 10,
	RAW_RSA = 11,
	X509_CERT = 12,
	X509_BUNDLE = 13,
};

type AuthMethod = enum {
	RESERVED = 0,
	RSA_SIG = 1,
	SHARED_KEY_MSG_IC = 2,
	DSS_SIG = 3,
};

type NotifyMsgType = enum {
	RESERVED = 0,
	UNSUPPORTED_CRITICAL_PAYLOAD = 1,
	DOI_NOT_SUPPORTED = 2,
	SITUATION_NOT_SUPPORTED = 3,
	INVALID_IKE_SPI = 4,
	INVALID_MAJOR_VERSION = 5,
	INVALID_MINOR_VERSION = 6,
	INVALID_SYNTAX = 7,
	INVALID_FLAGS = 8,
	INVALID_MESSAGE_ID = 9,
	INVALID_PROTCOL_ID = 10,
	INVALID_SPI = 11,
	INVALID_TRANSFORM_ID = 12,
	ATTRIBUTES_NOT_SUPPORTED = 13,
	NO_PROPOSAL_CHOSEN = 14,
	BAD_PROPOSAL_SYNTAX = 15,
	PAYLOAD_MALFORMED = 16,
	INVALID_KE_PAYLOAD = 17,
	INVALID_ID_INFORMATION = 18,
	INVALID_CERT_ENCODING = 19,
	INVALID_CERTIFICATE = 20,
	CERT_TYPE_UNSUPPORTED = 21,
	INVALID_CERT_AUTHORITY = 22,
	INVALID_HASH_INFORMATION = 23,
	AUTHENTICATION_FAILED = 24,
	INVALID_SIGNATURE = 25,
	ADDRESS_NOTIFICATION = 26,
	NOTIFY_SA_LIFETIME = 27,
	CERTIFICATE_UNAVAILABLE = 28,
	UNSUPPORTED_EXCHANGE_TYPE = 29,
	UNEQUAL_PAYLOAD_LENGTHS = 30,
	SINGLE_PAIR_REQUIRED = 34,
	NO_ADDITIONAL_SAS = 35,
	INTERNAL_ADDRESS_FAILURE = 36,
	FAILED_CP_REQUIRED = 37,
	TS_UNACCEPTABLE = 38,
	INVALID_SELECTORS = 39,
};

type TrafficSelectorType = enum {
	IPV4 = 7,
	IPV6 = 8,
};

type ConfigurationType = enum {
	RESERVED = 0,
	CFG_REQUEST = 1,
	CFG_REPLY = 2,
	CFG_SET = 3,
	CFG_ACK = 4,
};

type CfgAttributeType = enum {
	RESERVED = 0,
	INTERNAL_IP4_ADDRESS = 1,
	INTERNAL_IP4_NETMASK = 2,
	INTERNAL_IP4_DNS = 3,
	INTERNAL_IP4_NBNS = 4,
	INTERNAL_ADDRESS_EXPIRY = 5,
	INTERNAL_IP4_DHCP = 6,
	APPLICATION_VERSION = 7,
	INTERNAL_IP6_ADDRESS = 8,
	RESERVED2 = 9,
	INTERNAL_IP6_DNS = 10,
	INTERNAL_IP6_NBNS = 11,
	INTERNAL_IP6_DHCP = 12,
	INTERNAL_IP4_SUBNET = 13,
	SUPPORTED_ATTRIBUTES = 14,
	INTERNAL_IP6_SUBNET = 15,
};

type AttributeType = enum {
	ENCRYPTION_ALG = 1,
	HASH_ALG = 2,
	AUTH_METHOD = 3,
	GROUP_DESC = 4,
	GROUP_TYPE = 5,
	GROUP_PRIME_POLYNOMIAL = 6,
	GROUP_GENERATOR_ONE = 7,
	GROUP_GENERATOR_TWO = 8,
	GROUP_CURVE_A = 9,
	GROUP_CURVE_B = 10,
	LIFE_TYPE = 11,
	LIFE_DURATION = 12,
	PRF = 13,
	KEY_LENGTH = 14,
	FIELD_SIZE = 15,
	GROUP_ORDER = 16,
};

public type IPSecPacketUDP = unit {
	message_header: uint32;
	switch ( self.message_header ) {
		0 -> ipsecike: IPSecIKE();
		* -> ipsecesp: IPSecESP(self.message_header);
	};
};

public type IPSecPacketsTCP = unit {
	records: IPSecPacketTCP()[];
};

type IPSecPacketTCP = unit() {
	packet_len: uint16;
	rec: IPSecPacketUDP &size=self.packet_len;
};

type SharedInfo = unit {
	var next_payload: PayloadType;
};

public type IPSecIKE = unit {
	# Use this to track state
	var shared_info: SharedInfo;

	initiator_spi: bytes &size=8;
	responder_spi: bytes &size=8;
	next_payload: uint8 &convert=PayloadType($$) { self.shared_info.next_payload = $$; }
	version: bitfield(8) {
		maj: 4..7;
		min: 0..3;
	};
	exchange_type: uint8 &convert=ExchangeType($$);
	flags: bitfield(8) {
		E: 0;
		C: 1;
		A: 2;
		I: 3;
		V: 4;
		R: 5;
		X2: 6..7;
	};
	message_id: uint32;
	length: uint32;
	payloads_v1: IPSecIKEv1_Payload(self.shared_info, self.message_id)[] &size=self.length-28 if (self.version.maj == 1 && !self.flags.E);
	payloads_v2: IPSecIKEv2_Payload(self.shared_info, self.message_id)[] &size=self.length-28 if (self.version.maj == 2);
} &requires=( (self.version.maj == 1 || self.version.maj == 2) && self.version.min == 0);

type IPSecIKEv2_Payload = unit(inout shared_info: SharedInfo, message_id: uint32) {
	var message_id: uint32 = message_id;

	var this_payload: PayloadType = shared_info.next_payload;

	header: IPSecIKE_Payload_Header { shared_info.next_payload = $$.next_payload; }

	switch ( self.this_payload ) {
		PayloadType::SA -> payload_sa: IPSecIKEv2_SA_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::KE -> payload_ke: IPSecIKEv2_KE_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::IDi -> payload_idi: IPSecIKEv2_IDi_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::IDr -> payload_idr: IPSecIKEv2_IDr_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::CERT -> payload_cert: IPSecIKEv2_CERT_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::CERTREQ -> payload_certreq: IPSecIKEv2_CERTREQ_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::AUTH -> payload_auth: IPSecIKEv2_AUTH_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::Ni -> payload_ni: IPSecIKEv2_Ni_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::N -> payload_n: IPSecIKEv2_N_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::D -> payload_d: IPSecIKEv2_D_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::V -> payload_v: IPSecIKEv2_V_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::TSi -> payload_tsi: IPSecIKEv2_TSi_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::TSr -> payload_tsr: IPSecIKEv2_TSr_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::E -> payload_e: IPSecIKEv2_E_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::CP -> payload_cp: IPSecIKEv2_CP_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::EAP -> payload_eap: IPSecIKEv2_EAP_Payload(message_id) &size=self.header.payload_length-4;
		PayloadType::NO_NEXT_PAYLOAD -> : bytes &size=0;
		* -> : bytes &eod;
	};
};

type IPSecIKE_Payload_Header = unit {
	next_payload: uint8 &convert=PayloadType($$);
	reserved: bitfield(8) {
	  critical: 7;
	};
	payload_length: uint16;
};

type IPSecIKEv2_SA_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	proposals: IPSecIKEv2_SA_Proposal(message_id)[];
};

type IPSecIKEv2_SA_Proposal = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	last_or_more: /\x00|\x02/;
	reserved: uint8;
	proposal_len: uint16;
	proposal_num: uint8;
	protocol_id: uint8;
	spi_size: uint8;
	num_transforms: uint8;
	spi: bytes &size=self.spi_size;
	transforms: IPSecIKEv2_SA_Transform(self.proposal_num, message_id)[self.num_transforms];
};

type IPSecIKEv2_SA_Transform = unit(proposal_num: uint8, message_id: uint32) {
	var message_id: uint32 = message_id;
	var proposal_num: uint8 = proposal_num;
	last_or_more: /\x00|\x03/;
	reserved: uint8;
	transform_len: uint16;
	transform_type: uint8 &convert=TransformType($$);
	reserved2: uint8;
	transform_id: uint16;
	transform_attributes: IPSecIKEv2_SA_Transform_Attribute(self.proposal_num, message_id, self.transform_id)[] &size=self.transform_len-8 if (self.transform_len > 8);
};

type DataAttribute = unit(message_id: uint32, proposal_num: uint8, transform_id: uint16) {
	var message_id: uint32 = message_id;
	var proposal_num: uint8 = proposal_num;
	var transform_id: uint16 = transform_id;

	attribute_type: bitfield(16) {
	  AF: 15;
	  the_type: 0..14;
	};

	attribute_len: uint16 if (self.attribute_type.AF == 0);
	attribute_val_var: bytes &size=self.attribute_len if (self.attribute_type.AF == 0);
	attribute_val: bytes &size=2 if (self.attribute_type.AF == 1);
};

type IPSecIKEv2_SA_Transform_Attribute = unit(proposal_num: uint8, message_id: uint32, transform_id: uint16) {
	var proposal_num: uint8 = proposal_num;
	var message_id: uint32 = message_id;
	var transform_id: uint16 = transform_id;

	data_attribute: DataAttribute(message_id, proposal_num, transform_id);
};

type IPSecIKEv2_KE_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	dh_group: uint16;
	reserved: uint16;
	key_exchange_data: bytes &eod;
};

type IPSecIKEv2_IDi_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	id_type: uint8 &convert=IDType($$);
	reserved: bytes &size=3;
	identification_data: bytes &eod;
};

type IPSecIKEv2_IDr_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	id_type: uint8 &convert=IDType($$);
	reserved: bytes &size=3;
	identification_data: bytes &eod;
};

type IPSecIKEv2_CERT_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	cert_encoding: uint8 &convert=CertEncoding($$);
	cert_data: bytes &eod;
};

type IPSecIKEv2_CERTREQ_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	cert_encoding: uint8 &convert=CertEncoding($$);
	cert_authority: bytes &eod;
};

type IPSecIKEv2_AUTH_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	auth_method: uint8 &convert=AuthMethod($$);
	reserved: bytes &size=3;
	auth_data: bytes &eod;
};

type IPSecIKEv2_Ni_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	nonce_data: bytes &eod;
};

type IPSecIKEv2_N_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	protocol_id: uint8 &convert=ProtocolID($$);
	spi_size: uint8;
	notify_msg_type: uint16 &convert=NotifyMsgType($$);
	spi: bytes &size=self.spi_size;
	notification_data: bytes &eod;
};

type IPSecIKEv2_D_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	protocol_id: uint8 &convert=ProtocolID($$);
	spi_size: uint8;
	num_spi: uint16;
	spis: spi(self.spi_size)[];
};

type spi = unit(spi_size: uint8) {
	data: bytes &size=spi_size;
};

type IPSecIKEv2_V_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	vendor_id: bytes &eod;
};

type IPSecIKEv2_TSi_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	num_tss: uint8;
	reserved: bytes &size=3;
	traffic_selectors: TrafficSelector(message_id)[self.num_tss];
};

type IPSecIKEv2_TSr_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	num_tss: uint8;
	reserved: bytes &size=3;
	traffic_selectors: TrafficSelector(message_id)[self.num_tss];
};

type TrafficSelector = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	ts_type: uint8 &convert=TrafficSelectorType($$);
	ip_proto_id: uint8;
	selector_len: uint16;
	start_port: uint16;
	end_port: uint16;
	switch (self.ts_type) {
		TrafficSelectorType::IPV4 -> start_address: addr &ipv4;
		TrafficSelectorType::IPV6 -> start_address: addr &ipv6;
	};
	switch (self.ts_type) {
		TrafficSelectorType::IPV4 -> end_address: addr &ipv4;
		TrafficSelectorType::IPV6 -> end_address: addr &ipv6;
	};
};

type IPSecIKEv2_E_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	payload: bytes &eod;
};

type IPSecIKEv2_CP_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	cfg_type: uint8 &convert=ConfigurationType($$);
	reserved: bytes &size=3;
	attributes: ConfigureAttribute(self.cfg_type, message_id)[];
};

type ConfigureAttribute = unit(rec: ConfigurationType, message_id: uint32) {
	var message_id: uint32 = message_id;
	var cfg_type: ConfigurationType = rec;
	attribute_type: bitfield(16) {
		R: 15;
		the_type: 0..14 &convert=CfgAttributeType($$);
	};
	length: uint16;
	value: bytes &size=self.length;
};

type IPSecIKEv2_EAP_Payload = unit(message_id: uint32) {
	var message_id: uint32 = message_id;
	payload: bytes &eod;
};

type IPSecIKEv1_Payload = unit(inout shared_info: SharedInfo, message_id: uint32) {
	var message_id: uint32 = message_id;

	var this_payload: PayloadType = shared_info.next_payload;

	header: IPSecIKE_Payload_Header { shared_info.next_payload = $$.next_payload; }

	switch ( self.this_payload ) {
		PayloadType::SA_v1 -> payload_sa: IPSecIKEv1_SA_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::P_v1 -> payload_p: IPSecIKEv1_P_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::T_v1 -> payload_t: IPSecIKEv1_T_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::KE_v1 -> payload_ke: IPSecIKEv1_KE_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::ID_v1 -> payload_id: IPSecIKEv1_ID_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::CERT_v1 -> payload_cert: IPSecIKEv1_CERT_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::CR_v1 -> payload_cr: IPSecIKEv1_CR_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::HASH_v1 -> payload_hash: IPSecIKEv1_HASH_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::SIG_v1 -> payload_sig: IPSecIKEv1_SIG_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::NONCE_v1 -> payload_nonce: IPSecIKEv1_NONCE_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::N_v1 -> payload_n: IPSecIKEv1_N_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::D_v1 -> payload_d: IPSecIKEv1_D_Payload(message_id, self.header) &size=self.header.payload_length-4;
		PayloadType::VID_v1 -> payload_vid: IPSecIKEv1_VID_Payload(message_id, self.header) &size=self.header.payload_length-4;
		* -> : bytes &eod;
	};
};

type IPSecIKEv1_SA_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	doi: uint32;
	situation: bytes &size=4;
	proposals: IKEv1Proposal(message_id)[] &until-including=$$.header.next_payload == PayloadType::NO_NEXT_PAYLOAD;
};

type IKEv1Proposal = unit(message_id: uint32) {
	header: IPSecIKE_Payload_Header;
	payload: IPSecIKEv1_P_Payload(message_id, self.header);
	transforms: IKEv1Transform(message_id, self.payload.proposal_num)[self.payload.num_transforms];
};

type IKEv1Transform = unit(message_id: uint32, proposal_num: uint8) {
	header: IPSecIKE_Payload_Header;
	transform: IPSecIKEv1_T_Payload(message_id, self.header, proposal_num);
};

type IPSecIKEv1_P_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	proposal_num: uint8;
	protocol_id: uint8;
	spi_size: uint8;
	num_transforms: uint8;
	spi: bytes &size=self.spi_size;
};

type IPSecIKEv1_T_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header, proposal_num: uint8 = 0) {
	var message_id: uint32 = message_id;
	var proposal_num: uint8 = proposal_num;
	transform_num: uint8;
	transform_id: uint8;
	reserved: bytes &size=2;
	sa_attributes: DataAttribute(message_id, proposal_num, self.transform_id)[];
};

type IPSecIKEv1_KE_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	key_exchange_data: bytes &size=header.payload_length-4;
};

type IPSecIKEv1_ID_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	id_type: uint8;
	doi_data: bytes &size=3;
	identification_data: bytes &eod;
};

type IPSecIKEv1_CERT_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	cert_encoding: uint8 &convert=CertEncoding($$);
	cert_data: bytes &size=header.payload_length-5;
};

type IPSecIKEv1_CR_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	cert_encoding: uint8 &convert=CertEncoding($$);
	cert_authority: bytes &size=header.payload_length-5;
};

type IPSecIKEv1_HASH_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	hash_data: bytes &eod;
};

type IPSecIKEv1_SIG_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	sig_data: bytes &size=header.payload_length-4;
};

type IPSecIKEv1_NONCE_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	nonce_data: bytes &size=header.payload_length-4;
};

type IPSecIKEv1_N_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	protocol_id: uint8 &convert=ProtocolID($$);
	spi_size: uint8;
	notify_msg_type: uint16 &convert=NotifyMsgType($$);
	spi: bytes &size=self.spi_size;
	notification_data: bytes &eod;
};

type IPSecIKEv1_D_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	protocol_id: uint8 &convert=ProtocolID($$);
	spi_size: uint8;
	num_spi: uint16;
	spis: spi(self.spi_size)[];
};

type IPSecIKEv1_VID_Payload = unit(message_id: uint32, header: IPSecIKE_Payload_Header) {
	var message_id: uint32 = message_id;
	vendor_id: bytes &size=header.payload_length-4;
};

type IPSecESP = unit(spi_val: uint32) {
	var spi: uint32 = spi_val;
	seq: uint32;
	payload: bytes &eod;
};
