# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.

module ipsec_zeek;

import ipsec;
import zeek;

on ipsec::IPSecIKE::%done {
	zeek::confirm_protocol();
}

on ipsec::IPSecESP::%done {
	zeek::confirm_protocol();
}

on ipsec::IPSecIKE::%error {
	zeek::reject_protocol("error while parsing IPSecIKE record");
}

on ipsec::IPSecESP::%error {
	zeek::reject_protocol("error while parsing IPSecESP record");
}

public function create_ike_msg(msg: ipsec::IPSecIKE):
    tuple<
        initiator_spi: bytes,
        responder_spi: bytes,
        next_payload: uint8,
        maj_ver: uint8,
        min_ver: uint8,
        exchange_type: uint8,
        flag_e: bool,
        flag_c: bool,
        flag_a: bool,
        flag_i: bool,
        flag_v: bool,
        flag_r: bool,
        message_id: uint32,
        length: uint32> {
    return (
    	msg.initiator_spi,
    	msg.responder_spi,
    	cast<uint8>(msg.next_payload),
    	msg.version.maj,
    	msg.version.min,
        cast<uint8>(msg.exchange_type),
        cast<bool>(msg.flags.E),
        cast<bool>(msg.flags.C),
        cast<bool>(msg.flags.A),
        cast<bool>(msg.flags.I),
        cast<bool>(msg.flags.V),
        cast<bool>(msg.flags.R),
        msg.message_id,
        msg.length
    );
}

public function create_esp_msg(msg: ipsec::IPSecESP):
    tuple<
        spi: uint32,
        seq: uint32,
        payload_len: uint64> {
		return (msg.spi, msg.seq, |msg.payload|);
}

public function create_proposal_msg(msg: ipsec::IPSecIKEv2_SA_Proposal):
    tuple<
    	message_id: uint32,
        last_or_more: bytes,
        proposal_len: uint16,
        proposal_num: uint8,
        protocol_id: uint8,
        spi_size: uint8,
        num_transforms: uint8,
        spi: bytes> {
    return (
    	msg.message_id,
    	msg.last_or_more,
    	msg.proposal_len,
    	msg.proposal_num,
    	cast<uint8>(msg.protocol_id),
    	msg.spi_size,
    	msg.num_transforms,
    	msg.spi
    );
}

public function create_transform_msg(msg: ipsec::IPSecIKEv2_SA_Transform):
    tuple<
    	message_id: uint32,
        proposal_num: uint8,
        last_or_more: bytes,
        transform_len: uint16,
        transform_type: uint8,
        transform_id: uint16> {
    return (
    	msg.message_id,
    	msg.proposal_num,
    	msg.last_or_more,
    	msg.transform_len,
    	cast<uint8>(msg.transform_type),
    	msg.transform_id
    );
}

public function create_data_attribute_msg(msg: ipsec::DataAttribute):
    tuple<
    	message_id: uint32,
        proposal_num: uint8,
        transform_id: uint16,
        AF: bool,
        attribute_type: uint16,
        attribute_val: bytes> {
        if (msg.attribute_type.AF == 0)
    		return (msg.message_id, msg.proposal_num, msg.transform_id,
    		        msg.attribute_type.AF > 0, msg.attribute_type.the_type,
    		        msg.attribute_val_var);
		else
    		return (msg.message_id, msg.proposal_num, msg.transform_id,
    		        msg.attribute_type.AF > 0, msg.attribute_type.the_type,
    		        msg.attribute_val);
}

public function create_ke_msg(msg: ipsec::IPSecIKEv2_KE_Payload):
    tuple<
    	message_id: uint32,
        dh_group: uint16,
        key_exchange_data: bytes> {
    return (
    	msg.message_id,
    	msg.dh_group,
    	msg.key_exchange_data
    );
}

public function create_ke_msg(msg: ipsec::IPSecIKEv1_KE_Payload):
    tuple<
    	message_id: uint32,
        key_exchange_data: bytes> {
    return (
    	msg.message_id,
    	msg.key_exchange_data
    );
}

public function create_id_msg(msg: ipsec::IPSecIKEv2_IDi_Payload):
    tuple<
    	message_id: uint32,
        id_type: uint8,
        identification_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.id_type),
    	msg.identification_data
    );
}

public function create_id_msg(msg: ipsec::IPSecIKEv2_IDr_Payload):
    tuple<
    	message_id: uint32,
        id_type: uint8,
        identification_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.id_type),
    	msg.identification_data
    );
}

public function create_id_msg(msg: ipsec::IPSecIKEv1_ID_Payload):
    tuple<
    	message_id: uint32,
        identification_data_len: uint64> {
    return (
    	msg.message_id,
    	|msg.identification_data|
    );
}

public function create_cert_msg(msg: ipsec::IPSecIKEv2_CERT_Payload):
    tuple<
    	message_id: uint32,
        cert_encoding: uint8,
        cert_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.cert_encoding),
    	msg.cert_data
    );
}

public function create_cert_msg(msg: ipsec::IPSecIKEv1_CERT_Payload):
    tuple<
    	message_id: uint32,
        cert_encoding: uint8,
        cert_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.cert_encoding),
    	msg.cert_data
    );
}

public function create_certreq_msg(msg: ipsec::IPSecIKEv2_CERTREQ_Payload):
    tuple<
    	message_id: uint32,
        cert_encoding: uint8,
        cert_authority: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.cert_encoding),
    	msg.cert_authority
    );
}

public function create_certreq_msg(msg: ipsec::IPSecIKEv1_CR_Payload):
    tuple<
    	message_id: uint32,
        cert_encoding: uint8,
        cert_authority: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.cert_encoding),
    	msg.cert_authority
    );
}

public function create_auth_msg(msg: ipsec::IPSecIKEv2_AUTH_Payload):
    tuple<
    	message_id: uint32,
        auth_method: uint8,
        auth_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.auth_method),
    	msg.auth_data
    );
}

public function create_nonce_msg(msg: ipsec::IPSecIKEv2_Ni_Payload):
    tuple<message_id:uint32, nonce_data_len: uint64> {
    return (
    	msg.message_id,
    	|msg.nonce_data|,
    );
}

public function create_nonce_msg(msg: ipsec::IPSecIKEv1_NONCE_Payload):
    tuple<message_id:uint32, nonce_data_len: uint64> {
    return (
    	msg.message_id,
    	|msg.nonce_data|,
    );
}

public function create_notify_msg(msg: ipsec::IPSecIKEv2_N_Payload):
    tuple<
    	message_id: uint32,
        protocol_id: uint8,
        spi_size: uint8,
        notify_msg_type: uint16,
        spi: bytes,
        notification_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.protocol_id),
    	msg.spi_size,
    	cast<uint16>(msg.notify_msg_type),
    	msg.spi,
    	msg.notification_data
    );
}

public function create_notify_msg(msg: ipsec::IPSecIKEv1_N_Payload):
    tuple<
    	message_id: uint32,
        protocol_id: uint8,
        spi_size: uint8,
        notify_msg_type: uint16,
        spi: bytes,
        notification_data: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.protocol_id),
    	msg.spi_size,
    	cast<uint16>(msg.notify_msg_type),
    	msg.spi,
    	msg.notification_data
    );
}

public function create_delete_msg(msg: ipsec::IPSecIKEv2_D_Payload):
    tuple<
    	message_id: uint32,
        protocol_id: uint8,
        spi_size: uint8,
        num_spi: uint16,
        spis: set<bytes>> {

	local rval: set<bytes>;
	for (spi in msg.spis)
		add rval[spi.data];

    return (
    	msg.message_id,
    	cast<uint8>(msg.protocol_id),
    	msg.spi_size,
    	msg.num_spi,
    	rval
    );
}

public function create_delete_msg(msg: ipsec::IPSecIKEv1_D_Payload):
    tuple<
    	message_id: uint32,
        protocol_id: uint8,
        spi_size: uint8,
        num_spi: uint16,
        spis: set<bytes>> {

	local rval: set<bytes>;
	for (spi in msg.spis)
		add rval[spi.data];

    return (
    	msg.message_id,
    	cast<uint8>(msg.protocol_id),
    	msg.spi_size,
    	msg.num_spi,
    	rval
    );
}

public function create_vendorid_msg(msg: ipsec::IPSecIKEv2_V_Payload):
    tuple<message_id: uint32, vendor_id: bytes> {
    return (
    	msg.message_id,
    	msg.vendor_id,
    );
}

public function create_vendorid_msg(msg: ipsec::IPSecIKEv1_VID_Payload):
    tuple<message_id: uint32, vendor_id: bytes> {
    return (
    	msg.message_id,
    	msg.vendor_id,
    );
}

public function create_trafficselector_msg(msg: ipsec::TrafficSelector):
    tuple<
    	message_id: uint32,
        ts_type: uint8,
        ip_proto_id: uint8,
        selector_len: uint16,
        start_port: uint16,
        end_port: uint16,
        start_address: addr,
        end_address: addr> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.ts_type),
    	msg.ip_proto_id,
    	msg.selector_len,
    	msg.start_port,
    	msg.end_port,
    	msg.start_address,
    	msg.end_address
    );
}

public function create_encrypted_msg(msg: ipsec::IPSecIKEv2_E_Payload):
	tuple<message_id: uint32, payload_len: uint64> {
	return (msg.message_id, |msg.payload|);
}

public function create_configuration_attr_msg(msg: ipsec::ConfigureAttribute):
    tuple<
    	message_id: uint32,
        cfg_type: uint8,
        attribute_type: uint16,
        length: uint16,
        value: bytes> {
    return (
    	msg.message_id,
    	cast<uint8>(msg.cfg_type),
    	msg.attribute_type.the_type,
    	msg.length,
    	msg.value
    );
}

public function create_eap_msg(msg: ipsec::IPSecIKEv2_EAP_Payload):
	tuple<message_id: uint32, payload_len: uint64> {
	return (msg.message_id, |msg.payload|);
}

public function create_sa_msg(msg: ipsec::IPSecIKEv1_SA_Payload):
    tuple<
    	message_id: uint32,
        doi: uint32,
        situation: bytes> {
    return (
    	msg.message_id,
    	msg.doi,
    	msg.situation
    );
}

public function create_hash_msg(msg: ipsec::IPSecIKEv1_HASH_Payload):
	tuple<message_id: uint32, hash_data_len: uint64> {
	return (msg.message_id, |msg.hash_data|);
}

public function create_p_msg(msg: ipsec::IPSecIKEv1_P_Payload):
    tuple<
    	message_id: uint32,
        proposal_num: uint8,
        protocol_id: uint8,
        spi_size: uint8,
        num_transforms: uint8,
        spi: bytes> {
    return (
    	msg.message_id,
    	msg.proposal_num,
    	cast<uint8>(msg.protocol_id),
    	msg.spi_size,
    	msg.num_transforms,
    	msg.spi
    );
}

public function create_t_msg(msg: ipsec::IPSecIKEv1_T_Payload):
    tuple<
    	message_id: uint32,
        proposal_num: uint8,
        transform_num: uint8,
        transform_id: uint8> {
    return (
    	msg.message_id,
    	msg.proposal_num,
    	msg.transform_num,
    	msg.transform_id
    );
}

public function create_sig_msg(msg: ipsec::IPSecIKEv1_SIG_Payload):
	tuple<message_id: uint32, sig_data_len: uint64> {
	return (msg.message_id, |msg.sig_data|);
}
