module asn1;

import spicy;

#- ASN.1 data types ----------------------------------------------------------
public type ASN1Type = enum {
  BOOLEAN = 1,
  INTEGER = 2,
  BITSTRING = 3,
  OCTETSTRING = 4,
  NULLVAL = 5,
  OBJECTIDENTIFIER = 6,
  ObjectDescriptor = 7,
  INSTANCEOF = 8,
  REAL = 9,
  ENUMERATED = 10,
  EMBEDDEDPDV = 11,
  UTF8String = 12,
  RELATIVEOID = 13,
  SEQUENCE = 16,
  SET = 17,
  NumericString = 18,
  PrintableString = 19,
  TeletextString = 20,
  VideotextString = 21,
  IA5String = 22,
  UTCTime = 23,
  GeneralizedTime = 24,
  GraphicString = 25,
  VisibleString = 26,
  GeneralString = 27,
  UniversalString = 28,
  CHARACTERSTRING = 29,
  BMPString = 30
};

#- ASN.1 data classes --------------------------------------------------------
public type ASN1Class = enum {
  UNIVERSAL = 0,
  APPLICATION = 1,
  CONTEXT_SPECIFIC = 2,
  PRIVATE = 3
};

type LengthType = unit {

  data : bitfield(8) {
    num: 0..6;
    islong: 7;
  };

  var len: uint64;

  var tag_len: uint8;

  switch ( self.data.islong ) {
    0 -> : b"" {
      self.len = self.data.num; self.tag_len = 1;
    }
    1 -> length_parse: bytes &size=self.data.num
                             &convert=$$.to_uint(spicy::ByteOrder::Network) {
      self.len = self.length_parse;
      self.tag_len = self.data.num + 1;
    }
  };
};

type ASN1Tag = unit {
  var tpe: ASN1Type;
  var len: uint8 = 1;
  var class: ASN1Class;
  var constructed: bool;

  data : bitfield(8) {
    num: 0..4;
    constructed: 5;
    class: 6..7;
  };

  on %done {
    self.tpe = ASN1Type(self.data.num);
    self.class = ASN1Class(self.data.class);
    self.constructed = cast<bool>(self.data.constructed);
  }
};

type ASN1BitString = unit(len: uint64, constructed: bool) {
  unused_bits: uint8;
  value_bits: bytes &size=(len - 1);

  # TODO - constructed form
  # `bytes` needs << and >> support before we can implement complex bitstrings
};

type ASN1OctetString = unit(len: uint64, constructed: bool) {
  var len: uint64;
  value: bytes &size = len;

  # TODO - constructed form

  on %done {
    self.len = len;
  }
};

type ASN1String = unit(tag: ASN1Tag, len: uint64) {

  octetstring: ASN1OctetString(len, tag.constructed);

  switch ( tag.tpe ) {

    ASN1Type::PrintableString,
    ASN1Type::GeneralizedTime,
    ASN1Type::UTCTime -> value: bytes &size=self.octetstring.len
                                      &parse-from=self.octetstring.value
                                      &convert=$$.decode(hilti::Charset::ASCII);

    ASN1Type::UTF8String -> value: bytes &size=self.octetstring.len
                                         &parse-from=self.octetstring.value
                                         &convert=$$.decode(hilti::Charset::UTF8);

    ### TODO ERROR - error out? (hilti::Charset::UTF32BE and hilti::Charset::UTF16BE don't exist)
    # ASN1Type::BMPString -> value: bytes &size=self.octetstring.len
    #                                     &parse-from=self.octetstring.value
    #                                     &convert=$$.decode(hilti::Charset::UTF16BE);
    # ASN1Type::UniversalString -> value: bytes &size=self.octetstring.len
    #                                           &parse-from=self.octetstring.value
    #                                           &convert=$$.decode(hilti::Charset::UTF32BE);

    * -> : bytes &size=len {
      throw "Unsupported ASN1String type";
    }
  };
};

type oidnibble = unit {
  data : bitfield(8) {
    num: 0..6;
    more: 7;
  };
};

type ASN1ObjectIdentifier = unit(len: uint64) {
  var oid: vector<uint64>;
  var temp: uint64;
  var oidstring: string;

  first: uint8 if ( len >= 1 ) {
    self.temp = self.first / 40;
    self.oid.push_back( self.temp );
    self.oidstring = "%d" % (self.temp);
    self.temp = self.first % 40;
    self.oid.push_back( self.temp );
    self.oidstring = self.oidstring + ".%d" % (self.temp);
    self.temp = 0;
  }

  sublist: oidnibble[len - 1] foreach {
    self.temp = ( self.temp<<7 ) | $$.data.num;
    if ( $$.data.more != 1 ) {
      self.oid.push_back(self.temp);
      self.oidstring = self.oidstring + ".%d" % (self.temp);
      self.temp = 0;
    }
  }

};

public type ASN1Header = unit {
  tag: ASN1Tag;

  var total_length: uint64;

  len: LengthType {
    self.total_length = self.len.len + self.tag.len + self.len.tag_len;
  }
};

const DEBUG_SPACES = "                                                       ";
const DEBUG_PRINT = True;

public type ASN1Body = unit(head: ASN1Header, recursive: bool, depth: uint32) {
  switch ( head.tag.tpe ) {

    ASN1Type::BOOLEAN -> bool_value: uint8 {
      if (head.len.len != 1) {
        throw "ASN1Type::BOOLEAN detected with length != 1";
      }
    }

    ASN1Type::INTEGER,
    ASN1Type::ENUMERATED -> num_value: bytes &size=head.len.len
                                             &convert=$$.to_int(spicy::ByteOrder::Big);

    ASN1Type::NULLVAL -> : void {
      if (head.len.len != 0) {
        throw "ASN1Type::NULLVAL detected with non-zero length";
      }
    }

    ASN1Type::BITSTRING -> bitstring: ASN1BitString(head.len.len, head.tag.constructed);

    ASN1Type::OCTETSTRING -> octetstring: ASN1OctetString(head.len.len, head.tag.constructed);

    ASN1Type::OBJECTIDENTIFIER -> objectidentifier: ASN1ObjectIdentifier(head.len.len);

    ASN1Type::PrintableString,
    ASN1Type::GeneralizedTime,
    ASN1Type::UTCTime,
    ASN1Type::UTF8String,
    ASN1Type::BMPString,
    ASN1Type::UniversalString -> asn1string: ASN1String(head.tag, head.len.len);
    ASN1Type::SEQUENCE, ASN1Type::SET -> seq: ASN1SubMessages(head.len.len, depth+1) if (recursive);

    * -> : bytes &size=head.len.len {
      throw "Unsupported ASN1Body type";
    }
  };

  on %done {
    if (DEBUG_PRINT == True) {
      if (self?.bool_value) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "BOOLEAN"), self.bool_value;
      } else if (self?.num_value) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "NUMBER"), self.num_value;
      } else if (self?.bitstring) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "BITSTRING"), self.bitstring, head.tag.constructed;
      } else if (self?.octetstring) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "OCTETSTRING"), self.octetstring, head.tag.constructed;
      } else if (self?.objectidentifier) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "OBJECTIDENTIFIER"), self.objectidentifier;
      } else if (self?.asn1string) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "STRING"), self.asn1string;
      } else if (self?.seq) {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe, "SEQUENCE|SET"), |self.seq.submessages|, head.len.len;
      } else {
        print "%.*s%s %s %s" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, head.tag.tpe);
      }
    }
  }
};

public type ASN1SubMessages = unit(msgLen: uint64, depth: uint32) {
  submessages: ASN1Message(True, depth)[] &eod;
} &size=msgLen;

public type ASN1Message = unit(recursive: bool, depth: uint32) {
  head: ASN1Header;
  body: ASN1Body(self.head, recursive, depth) if ( self.head.tag.class == ASN1Class::UNIVERSAL );
  var application_id: int32;
  application_data: bytes &size=self.head.len.len if ( self.head.tag.class != ASN1Class::UNIVERSAL ) {
    self.application_id = self.head.tag.data.num;
  }

  on %done {
    if (DEBUG_PRINT == True) {
      if ( self.head.tag.class != ASN1Class::UNIVERSAL ) {
        print "%.*s%s %d %s %d" % ((depth*2)+1, DEBUG_SPACES, self.head.tag.class, self.application_id, self.head.tag.constructed, self.head.len.len), self.head;
      }
    }
  }
};

public type ASN1MessageHeadless = unit(head: ASN1Header, recursive: bool, depth: uint32) {
  body: ASN1Body(head, recursive, depth) if ( head.tag.class == ASN1Class::UNIVERSAL );
  var application_id: int32;
  application_data: bytes &size=head.len.len if ( head.tag.class != ASN1Class::UNIVERSAL ) {
    self.application_id = head.tag.data.num;
  }

  on %done {
    if (DEBUG_PRINT == True) {
      if ( head.tag.class != ASN1Class::UNIVERSAL ) {
        print "%.*s%s %d %s %d" % ((depth*2)+1, DEBUG_SPACES, head.tag.class, self.application_id, head.tag.constructed, head.len.len), head;
      }
    }
  }
};

public type ASN1MessageBaseRecursive = unit {
  msg : ASN1Message(True, 0);
};

public type ASN1MessageBase = unit {
  msg : ASN1Message(False, 0);
};