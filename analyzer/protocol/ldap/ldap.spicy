module ldap;

import asn1;

# https://tools.ietf.org/html/rfc4511

public type ProtocolOpcode = enum {
  BIND_REQUEST = 0,
  BIND_RESPONSE = 1,
  UNBIND_REQUEST = 2,
  SEARCH_REQUEST = 3,
  SEARCH_RESULT_ENTRY = 4,
  SEARCH_RESULT_DONE = 5,
  MODIFY_REQUEST = 6,
  MODIFY_RESPONSE = 7,
  ADD_REQUEST = 8,
  ADD_RESPONSE = 9,
  DEL_REQUEST = 10,
  DEL_RESPONSE = 11,
  MOD_DN_REQUEST = 12,
  MOD_DN_RESPONSE = 13,
  COMPARE_REQUEST = 14,
  COMPARE_RESPONSE = 15,
  ABANDON_REQUEST = 16,
  SEARCH_RESULT_REFERENCE = 19,
  EXTENDED_REQUEST = 23,
  EXTENDED_RESPONSE = 24,
  INTERMEDIATE_RESPONSE = 25
};

public type ResultCode = enum {
  SUCCESS = 0,
  OPERATIONS_ERROR = 1,
  PROTOCOL_ERROR = 2,
  TIME_LIMIT_EXCEEDED = 3,
  SIZE_LIMIT_EXCEEDED = 4,
  COMPARE_FALSE = 5,
  COMPARE_TRUE = 6,
  AUTH_METHOD_NOT_SUPPORTED = 7,
  STRONGER_AUTH_REQUIRED = 8,
  REFERRAL = 10,
  ADMIN_LIMIT_EXCEEDED = 11,
  UNAVAILABLE_CRITICAL_EXTENSION = 12,
  CONFIDENTIALITY_REQUIRED = 13,
  SASL_BIND_IN_PROGRESS = 14,
  NO_SUCH_ATTRIBUTE = 16,
  UNDEFINED_ATTRIBUTE_TYPE = 17,
  INAPPROPRIATE_MATCHING = 18,
  CONSTRAINT_VIOLATION = 19,
  ATTRIBUTE_OR_VALUE_EXISTS = 20,
  INVALID_ATTRIBUTE_SYNTAX = 21,
  NO_SUCH_OBJECT = 32,
  ALIAS_PROBLEM = 33,
  INVALID_DNSYNTAX = 34,
  ALIAS_DEREFERENCING_PROBLEM = 36,
  INAPPROPRIATE_AUTHENTICATION = 48,
  INVALID_CREDENTIALS = 49,
  INSUFFICIENT_ACCESS_RIGHTS = 50,
  BUSY = 51,
  UNAVAILABLE = 52,
  UNWILLING_TO_PERFORM = 53,
  LOOP_DETECT = 54,
  NAMING_VIOLATION = 64,
  OBJECT_CLASS_VIOLATION = 65,
  NOT_ALLOWED_ON_NON_LEAF = 66,
  NOT_ALLOWED_ON_RDN = 67,
  ENTRY_ALREADY_EXISTS = 68,
  OBJECT_CLASS_MODS_PROHIBITED = 69,
  AFFECTS_MULTIPLE_DSAS = 71,
  OTHER = 80
};

public type Result = unit {
  code: asn1::ASN1Message &convert=cast<ResultCode>(cast<uint8>($$.body.num_value));
  matchedDN: asn1::ASN1Message &convert=$$.body.octetstring;
  diagnosticMessage: asn1::ASN1Message &convert=$$.body.octetstring;

  # TODO: implement referral
  # https://tools.ietf.org/html/rfc4511#section-4.1.10
  # referral: bytes &eod if (self.code == ResultCode::REFERRAL);
};

public type Message = unit {
  %random-access;

  # parse the header out to validate the ASN.1 envelope type (sequence) before we parse the body
  head: asn1::ASN1Header {
    if (self.head.tag.tpe != asn1::ASN1Type::SEQUENCE) {
      throw "LDAP message is not ASN.1 sequence as described in RFC 4511";
    }
  }

  # parse the body, letting it know about the header and its total size
  body: MessageBody(self.head, self.head.total_length-self.offset());

  on %done {
    print "Message", self.head.total_length;
  }
};

public type MessageBody = unit(head: asn1::ASN1Header, bodyLen: uint64) {
  %random-access;

  sequence: asn1::ASN1MessageHeadless(head);
  messageID: asn1::ASN1Message &convert=$$.body.num_value;
  var opcode: ProtocolOpcode;
  operation: asn1::ASN1Message {
    if (self.operation.head.tag.class == asn1::ASN1Class::APPLICATION) {
      self.opcode = cast<ProtocolOpcode>(self.operation.head.tag.data.num);
    }
  }
  switch ( self.opcode ) {
    ProtocolOpcode::BIND_REQUEST -> BIND_REQUEST: BindRequest(self.messageID);
    ProtocolOpcode::BIND_RESPONSE -> BIND_RESPONSE: BindResponse(self.messageID);
    ProtocolOpcode::UNBIND_REQUEST -> UNBIND_REQUEST: UnbindRequest(self.messageID);
    ProtocolOpcode::SEARCH_REQUEST -> SEARCH_REQUEST: SearchRequest(self.messageID);
    ProtocolOpcode::SEARCH_RESULT_ENTRY -> SEARCH_RESULT_ENTRY: SearchResultEntry(self.messageID);
    ProtocolOpcode::SEARCH_RESULT_DONE -> SEARCH_RESULT_DONE: SearchResultDone(self.messageID);
    ProtocolOpcode::MODIFY_REQUEST -> MODIFY_REQUEST: ModifyRequest(self.messageID);
    ProtocolOpcode::MODIFY_RESPONSE -> MODIFY_RESPONSE: ModifyResponse(self.messageID);
    ProtocolOpcode::ADD_REQUEST -> ADD_REQUEST: AddRequest(self.messageID);
    ProtocolOpcode::ADD_RESPONSE -> ADD_RESPONSE: AddResponse(self.messageID);
    ProtocolOpcode::DEL_REQUEST -> DEL_REQUEST: DelRequest(self.messageID);
    ProtocolOpcode::DEL_RESPONSE -> DEL_RESPONSE: DelResponse(self.messageID);
    ProtocolOpcode::MOD_DN_REQUEST -> MOD_DN_REQUEST: ModDNRequest(self.messageID);
    ProtocolOpcode::MOD_DN_RESPONSE -> MOD_DN_RESPONSE: ModDNResponse(self.messageID);
    ProtocolOpcode::COMPARE_REQUEST -> COMPARE_REQUEST: CompareRequest(self.messageID);
    ProtocolOpcode::COMPARE_RESPONSE -> COMPARE_RESPONSE: CompareResponse(self.messageID);
    ProtocolOpcode::ABANDON_REQUEST -> ABANDON_REQUEST: AbandonRequest(self.messageID);
    ProtocolOpcode::SEARCH_RESULT_REFERENCE -> SEARCH_RESULT_REFERENCE: SearchResultReference(self.messageID);
    ProtocolOpcode::EXTENDED_REQUEST -> EXTENDED_REQUEST: ExtendedRequest(self.messageID);
    ProtocolOpcode::EXTENDED_RESPONSE -> EXTENDED_RESPONSE: ExtendedResponse(self.messageID);
    ProtocolOpcode::INTERMEDIATE_RESPONSE -> INTERMEDIATE_RESPONSE: IntermediateResponse(self.messageID);
  };

  on %done {
    print "MessageBody", self.messageID, self.opcode, bodyLen;
  }
} &size=bodyLen;

# Bind Operation
# https://tools.ietf.org/html/rfc4511#section-4.2

type BindAuthType = enum {
  BIND_AUTH_SIMPLE = 0,
  BIND_AUTH_SASL = 3,
  BIND_AUTH_INVALID = 31
};

type SaslCredentials = unit {
  mechanism: asn1::ASN1Message &convert=$$.body.octetstring;

  # TODO: parse this SASL credentials
  _creds: bytes &eod;
  creds: asn1::ASN1Message &optional &parse-from=self._creds if ( |self._creds| > 0 );
};

type BindRequest = unit(messageID : int64) {
  version: asn1::ASN1Message &convert=$$.body.num_value;
  name: asn1::ASN1Message &convert=$$.body.octetstring;
  var authType: BindAuthType = BindAuthType::BIND_AUTH_INVALID;
  authentication: asn1::ASN1Message {
    if (self.authentication.head.tag.class == asn1::ASN1Class::CONTEXT_SPECIFIC) {
      self.authType = cast<BindAuthType>(self.authentication.head.tag.data.num);
    }
  }
  simpleCreds: bytes &size=self.authentication.head.len.len if (self.authType == BindAuthType::BIND_AUTH_SIMPLE);
  saslCreds: SaslCredentials if (self.authType == BindAuthType::BIND_AUTH_SASL);

  data: bytes &eod;
  on %done {
    print "BindRequest", messageID, |self.data|, self;
  }
};

type BindResponse = unit(messageID : int64) {
  result: Result;

  # TODO: parse this SASL credentials
  # _serverSaslCreds: bytes &eod;
  # serverSaslCreds: asn1::ASN1Message &optional &parse-from=self._serverSaslCreds if ( |self._serverSaslCreds| > 0 );

  data: bytes &eod;
  on %done {
    print "BindResponse", messageID, |self.data|, self;
  }
};

# Unbind Operation
# https://tools.ietf.org/html/rfc4511#section-4.3

type UnbindRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "UnbindRequest", messageID, |self.data|, self;
  }
};

# Search Operation
# https://tools.ietf.org/html/rfc4511#section-4.5

type SearchRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "SearchRequest", messageID, |self.data|, self;
  }
};

type SearchResultEntry = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "SearchResultEntry", messageID, |self.data|, self;
  }
};

type SearchResultDone = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "SearchResultDone", messageID, |self.data|, self;
  }
};

# Modify Operation
# https://tools.ietf.org/html/rfc4511#section-4.6

type ModifyRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "ModifyRequest", messageID, |self.data|, self;
  }
};

type ModifyResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "ModifyResponse", messageID, |self.data|, self;
  }
};

# Add Operation
# https://tools.ietf.org/html/rfc4511#section-4.7

type AddRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "AddRequest", messageID, |self.data|, self;
  }
};

type AddResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "AddResponse", messageID, |self.data|, self;
  }
};

# Delete Operation
# https://tools.ietf.org/html/rfc4511#section-4.8

type DelRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "DelRequest", messageID, |self.data|, self;
  }
};

type DelResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "DelResponse", messageID, |self.data|, self;
  }
};

# Modify DN Operation
# https://tools.ietf.org/html/rfc4511#section-4.8

type ModDNRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "ModDNRequest", messageID, |self.data|, self;
  }
};

type ModDNResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "ModDNResponse", messageID, |self.data|, self;
  }
};

# Compare Operation
# https://tools.ietf.org/html/rfc4511#section-4.10

type CompareRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "CompareRequest", messageID, |self.data|, self;
  }
};

type CompareResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "CompareResponse", messageID, |self.data|, self;
  }
};

# Abandon Operation
# https://tools.ietf.org/html/rfc4511#section-4.11

type AbandonRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "AbandonRequest", messageID, |self.data|, self;
  }
};

type SearchResultReference = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "SearchResultReference", messageID, |self.data|, self;
  }
};

# Extended Operation
# https://tools.ietf.org/html/rfc4511#section-4.12

type ExtendedRequest = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "ExtendedRequest", messageID, |self.data|, self;
  }
};

type ExtendedResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "ExtendedResponse", messageID, |self.data|, self;
  }
};

# IntermediateResponse Message
# https://tools.ietf.org/html/rfc4511#section-4.13

type IntermediateResponse = unit(messageID : int64) {

  data: bytes &eod;
  on %done {
    print "IntermediateResponse", messageID, |self.data|, self;
  }
};
